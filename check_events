#!/usr/bin/env perl

use Modern::Perl;
use Getopt::Std;

use lib     qw( lib );
use PubStandards;



my %opt;
getopts( 'v', \%opt );

my $name    = shift
              // 'london';

my $ps      = PubStandards->new();
my $chapter = $ps->get_chapter( $name );
my $events  = $chapter->get_all_events_from_upcoming(); 

foreach my $event ( @$events ) {
    my $id        = $event->{'id'};
    my $event_key = "event_${id}";
    my $doc       = $ps->get_document( $event_key );
    
    say "-> EVENT $id";
    
    if ( !defined $doc ) {
        say "   new event ${event_key}";
        
        $event->{'slug'}         = $chapter->get_new_slug( $event->{'name'} );
        $event->{'chapter_name'} = $name;
        $ps->update_document( $event_key, $event );
    }
    
    my $photos = $ps->get_event_photos_from_flickr( $id );
    foreach my $photo ( @$photos ) {
        my $photo_id = $photo->{'id'};
        my $photo_key = "photo_${photo_id}";
        
        say "      photo ${photo_id}"
            if $opt{'v'};
        
        my $details = $ps->get_photo_details( $photo_id );
        $details->{'event_document'} = $event_key;
        $details->{'chapter_name'}   = $name;
        $details->{'views'}          = sprintf '%08d',
                                           $details->{'views'};
        
        my( $changed, $doc )
            = $ps->update_document_if_changed( $photo_key, $details );
        
        say "      update document $photo_key"
            if $changed;
    }
}

my $next  = $ps->get_next_pubstandards_date(); 
my $event = $chapter->get_event_by_date( $next );

if ( !defined $event ) {
    say 'Need to create next event...';
}
exit;
